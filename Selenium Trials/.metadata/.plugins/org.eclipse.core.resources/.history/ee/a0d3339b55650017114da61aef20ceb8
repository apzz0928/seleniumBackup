package rctTest;

import static org.testng.AssertJUnit.assertFalse;
import static org.testng.AssertJUnit.assertTrue;
import static org.testng.AssertJUnit.fail;

import java.io.IOException;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Set;
import java.util.concurrent.TimeUnit;

import org.junit.FixMethodOrder;
import org.junit.runners.MethodSorters;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.ie.InternetExplorerDriver;
import org.openqa.selenium.firefox.FirefoxDriver; 
import org.openqa.selenium.Dimension;
import org.openqa.selenium.NoAlertPresentException;
import org.openqa.selenium.JavascriptExecutor; //js를 사용하기 위해 추가
import org.openqa.selenium.Alert; //alert 처리용
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass; 
import org.testng.annotations.Test;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class rctTestAuthMng {
	private static WebDriver driver;
	private static String TestBrowser;
	private static StringBuffer verificationErrors = new StringBuffer();
	private static String CHROMEDRIVER_FILE_PATH;
	private static String FIREFOXDRIVER_FILE_PATH;
	private static String INTERNETEXPLORER_FILE_PATH;
  	private static JavascriptExecutor js; 
 	private static HttpURLConnection huc;
  	private static int respCode;
    private static String baseUrl;

    @BeforeClass
    public static void setUp() throws Exception {
  		TestBrowser = "firefox";
  		CHROMEDRIVER_FILE_PATH = "D:/Selenium/driver/chromedriver.exe"; //크롬 드라이버 파일 경로
  		FIREFOXDRIVER_FILE_PATH = "D:/Selenium/driver/geckodriver.exe"; //파이어폭스 드라이버 파일 경로
  		INTERNETEXPLORER_FILE_PATH = "D:/Selenium/driver/IEDriverServer32.exe"; //IE 드라이버 파일 경로  		
  		
  		if(TestBrowser.equals("chrome")){
  		//테스트 브라우저를 크롬으로 설정
  	  		System.setProperty("webdriver.chrome.driver", CHROMEDRIVER_FILE_PATH);
  	  		driver = new ChromeDriver();
  		} else if (TestBrowser.equals("firefox")) {
  	  		System.setProperty("webdriver.gecko.driver", FIREFOXDRIVER_FILE_PATH);
  	  		driver = new FirefoxDriver();
  		} else if (TestBrowser.equals("ie")) {
  			System.setProperty("webdriver.ie.driver", INTERNETEXPLORER_FILE_PATH);
  	  		driver = new InternetExplorerDriver();
  		}
  		driver.manage().window().setSize(new Dimension(1200, 1400));
        //javaScript를 쓸 수 있도록 해줌
        js = (JavascriptExecutor) driver;        
        baseUrl = "https://rct-d-p.astorm.com";
    }
 
  	//프롬프트창 입력 후 확인
  	public static void sendKeyAlert(String statusText, String number) throws Exception {
  		try {
  			driver.wait();
	  		Thread.sleep(1000);
	  		Alert alert=driver.switchTo().alert();
	        String alertMessage=driver.switchTo().alert().getText();
	        System.out.println (statusText + " : " + alertMessage);
	        alert.sendKeys(number);
	        alert.accept();
	        Thread.sleep(1000);
	  	} catch (NoAlertPresentException e) {
			e.printStackTrace();
		}
  	}
    
  	//alert 확인 처리
  	public static void acceptAlert(String statusText) throws Exception {
  		try {
  	  		Alert alert=driver.switchTo().alert();
  	        String alertMessage=driver.switchTo().alert().getText();
  	        System.out.println (statusText + " : " + alertMessage);
  	        alert.accept();
  	        Thread.sleep(1000);
  		} catch (NoAlertPresentException e) {
  			e.printStackTrace();
  		}
  	}
  	
  	//입력된 URL 정상 여부 확인
  	public static boolean brokenLinkCheck (String urlName, String urlLink){
        try {
            huc = (HttpURLConnection)(new URL(urlLink).openConnection());
            huc.setRequestMethod("HEAD");
            huc.connect();
            respCode = huc.getResponseCode();
            if(respCode >= 400 && respCode != 503){ //자료실 다이렉트x 다운로드 링크 503나서 예외처리 그래도 http코드는 볼수있게함
            	System.out.println("***** " + urlName +" : 링크 상태 HTTP : " + respCode + " *****");
            	fail();
            } else {
            	System.out.println(urlName +" : 링크 상태 HTTP : " + respCode);
            }
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
		return false;
    }
  	
  	//브라우저에 따라 새로고침 대기시간 변경
  	public static void refreshReady () throws Exception {
        if(TestBrowser.equals("chrome")){
        	Thread.sleep(1000);
        } else if (TestBrowser.equals("firefox")) {
            Thread.sleep(3000);        	
        } else if (TestBrowser.equals("ie")) {
        	Thread.sleep(6000);
        }
  	}
  	//window 스위칭용
  	public static void handleMultipleWindows(String windowTitle) { 
  		Set<String> windows = driver.getWindowHandles(); 
  		for (String window : windows) { 
  			driver.switchTo().window(window); 
  			if (driver.getTitle().contains(windowTitle)) { 
  				return; 
			} 
		} 
	}
  	
  	public static void waitTime(int waitTime){
  		driver.manage().timeouts().implicitlyWait(waitTime, TimeUnit.SECONDS);
  	};
  	
  	@Test(priority = 0)
    public void Login() throws Exception {
    	//로그인
        driver.get(baseUrl + "/login/form.ct");
        Thread.sleep(1000);
        //해당 메세지가 있으면 Pass
        assertTrue(driver.getPageSource().contains("User ID"));
        //해당 메세지가 있으면 Fail
        assertFalse(driver.getPageSource().contains("페이지 주소가 잘못 입력되었거나, 이미 삭제된 페이지입니다."));        
        System.out.println("로그인 페이지 : Pass");
        js.executeScript("$('input[name=j_username]').prop('value', 'apzz0928')");
        js.executeScript("$('input[name=j_password]').prop('value', 'qordlf!@34')");
        js.executeScript("$('.ac_btn_text')[0].click();");
        System.out.println("로그인 : Pass");
        Thread.sleep(1000);        
    }
    
  	@Test(priority = 1)
    public void langChange() throws Exception {
    	driver.get(baseUrl + "/common/locale/ko");
        assertFalse(driver.getPageSource().contains("페이지 주소가 잘못 입력되었거나, 이미 삭제된 페이지입니다."));
        assertTrue(driver.getPageSource().contains("true"));
        System.out.println("언어변경 : Pass");
        Thread.sleep(1000);
        driver.get(baseUrl);
        Thread.sleep(1000);
	}
    
  	@Test(priority = 2)
    public void authorityMenu() throws Exception {
        driver.get(baseUrl + "/authority/menugroup.ct");
        refreshReady();
        assertFalse(driver.getPageSource().contains("페이지 주소가 잘못 입력되었거나, 이미 삭제된 페이지입니다."));
        assertTrue(driver.getPageSource().contains("메뉴 관리"));
        System.out.println("권한 관리 > 메뉴 관리 > 리스트 페이지 접근 : Pass");
        //메뉴 관리 리스트 순서 변경 및 검색 확인
        js.executeScript("$('.uid_group_order_btn:eq(0) > button > div > div > div > span:eq(0)').click();");
        Thread.sleep(1000);
        js.executeScript("$('.uid_ok_btn').click();");
        refreshReady();
        js.executeScript("$('.uid_group_order_btn:eq(1) > button > div > div > div > span:eq(0)').click();");
        Thread.sleep(1000);
        js.executeScript("$('.uid_ok_btn').click();");
        refreshReady();
        System.out.println("권한 관리 > 메뉴 관리 > 순서 변경 : Pass");
        js.executeScript("$('.ac_input').prop('value', 'common')");
        js.executeScript("$('.uid_menu_search').click();");
        assertTrue(driver.getPageSource().contains("공통기능"));
        System.out.println("권한 관리 > 메뉴 관리 > 검색 : Pass");
        js.executeScript("$('.ac_input').prop('value', '')");
        js.executeScript("$('.uid_menu_search').click();");
        js.executeScript("$('#uid_menu_list_tbody > tr > td:eq(1) > a')[0].click();");
        refreshReady();
        assertFalse(driver.getPageSource().contains("페이지 주소가 잘못 입력되었거나, 이미 삭제된 페이지입니다."));
        System.out.println("권한 관리 > 메뉴 관리 > 상세보기 페이지 접근 : Pass");
        js.executeScript("$('.uid_show_layer_menu_add_btn').click();");
        js.executeScript("$('div > input').prop('value', 'Test Menu1');");
        js.executeScript("$('input[name=menuURI]').val('/test.ct');");
        js.executeScript("$('.uid_layer_menu_add_btn').click();");
        Thread.sleep(1000);
        assertTrue(driver.getPageSource().contains("숫자만 입력 가능 합니다."));
        js.executeScript("$('.uid_ok_btn').click();");
        js.executeScript("$('input[name=menuHide]').val('0');");
        js.executeScript("$('.uid_layer_menu_add_btn').click();");
        Thread.sleep(1000);
        assertTrue(driver.getPageSource().contains("숫자만 입력 가능 합니다."));
        js.executeScript("$('.uid_ok_btn').click();");
        js.executeScript("$('input[name=menuOrder]').val('1');");
        js.executeScript("$('.uid_layer_menu_add_btn').click();");
        Thread.sleep(1000);
        assertTrue(driver.getPageSource().contains("추가 되었습니다."));
        js.executeScript("$('.uid_ok_btn').click();");
        System.out.println("권한 관리 > 메뉴 관리 > 상세보기 페이지 > 메뉴 추가 : Pass");
        refreshReady();
        js.executeScript("$('.uid_menu_order_btn:eq(2)').click();");
        Thread.sleep(1000);
        assertTrue(driver.getPageSource().contains("변경 되었습니다."));
        js.executeScript("$('.uid_ok_btn').click();");
        refreshReady();
        js.executeScript("$('.uid_menu_order_btn:eq(3)').click();");
        Thread.sleep(1000);
        assertTrue(driver.getPageSource().contains("변경 되었습니다."));
        js.executeScript("$('.uid_ok_btn').click();");
        System.out.println("권한 관리 > 메뉴 관리 > 상세보기 페이지 > 메뉴 순서 변경 : Pass");
        refreshReady();
        js.executeScript("$('.uid_menu_del_btn:eq(1)').click();");
        Thread.sleep(1000);
        assertTrue(driver.getPageSource().contains("이점 유의 해 주세요."));
        js.executeScript("$('.uid_ok_btn').click();");
        Thread.sleep(1000);
        assertTrue(driver.getPageSource().contains("삭제 되었습니다."));
        js.executeScript("$('.uid_ok_btn').click();");
        System.out.println("권한 관리 > 메뉴 관리 > 상세보기 페이지 > 메뉴 삭제 : Pass");        
        refreshReady();
    }
    
  	@Test(priority = 3)
    public void authorityGroupMng() throws Exception {
        driver.get(baseUrl + "/authority/authGroupList.ct");
        refreshReady();
        assertFalse(driver.getPageSource().contains("페이지 주소가 잘못 입력되었거나, 이미 삭제된 페이지입니다."));
        assertTrue(driver.getPageSource().contains("권한 그룹 관리"));
        System.out.println("권한 관리 > 권한 그룹 관리 > 리스트 페이지 > 페이지 접근 : Pass");
        //권한 관리 > 권한 그룹 상세 정보로 이동
        js.executeScript("$('tbody > tr:last-child > td:eq(1) > a')[0].click();");
        refreshReady();
        System.out.println("권한 관리 > 권한 그룹 관리 > 상세보기 페이지 > 페이지 접근 : Pass");
        js.executeScript("$('.ac_toggle_btn:eq(0) > i')[0].click();");
        js.executeScript("$('.uid_authgroup_menu_add_btn').click();");
        Thread.sleep(1000);
        assertTrue(driver.getPageSource().contains("추가 되었습니다."));
        js.executeScript("$('.uid_ok_btn').click();");
        System.out.println("권한 관리 > 권한 그룹 관리 > 리스트 페이지 > 메뉴 권한 추가 : Pass");
        refreshReady();
        js.executeScript("$('.ac_toggle_btn:eq(1) > i')[0].click();");
        js.executeScript("$('.uid_authgroup_menu_delete_btn').click();");
        Thread.sleep(1000);
        assertTrue(driver.getPageSource().contains("삭제 되었습니다."));
        js.executeScript("$('.uid_ok_btn').click();");
        System.out.println("권한 관리 > 권한 그룹 관리 > 리스트 페이지 > 메뉴 권한 삭제 : Pass");
        refreshReady();
        js.executeScript("$('.ac_toggle_btn:eq(2) > i')[0].click();");
        js.executeScript("$('.uid_authgroup_member_add_btn').click();");
        Thread.sleep(1000);
        assertTrue(driver.getPageSource().contains("추가 되었습니다."));
        js.executeScript("$('.uid_ok_btn').click();");
        System.out.println("권한 관리 > 권한 그룹 관리 > 리스트 페이지 > 사용자 권한 추가 : Pass");
        refreshReady();
        js.executeScript("$('.ac_toggle_btn:eq(3) > i')[0].click();");
        js.executeScript("$('.uid_authgroup_member_delete_btn').click();");
        Thread.sleep(1000);
        assertTrue(driver.getPageSource().contains("해당 관리자의 권한을 삭제하시겠습니까?"));
        js.executeScript("$('.uid_ok_btn').click();");
        System.out.println("권한 관리 > 권한 그룹 관리 > 리스트 페이지 > 사용자 권한 삭제 : Pass");
        refreshReady();
    }
    
  	@Test(priority = 4)
    public void groupListByAdmin() throws Exception {
    	driver.get(baseUrl + "/authority/groupListByAdmin.ct");
        refreshReady();
        assertFalse(driver.getPageSource().contains("페이지 주소가 잘못 입력되었거나, 이미 삭제된 페이지입니다."));
        assertTrue(driver.getPageSource().contains("LDAP 사용자를 선택하세요."));
        System.out.println("권한 관리 > 관리자 권한 보기 > 페이지 접근 : Pass");
        js.executeScript("$('.fa-chevron-down').click();");
        js.executeScript("$('.normal > li:eq(3)').click();");
        refreshReady();
        assertFalse(driver.getPageSource().contains("페이지 주소가 잘못 입력되었거나, 이미 삭제된 페이지입니다."));
        assertTrue(driver.getPageSource().contains("테스트 계정 전용 모든 권한 그룹"));
        System.out.println("권한 관리 > 관리자 권한 보기 : INTERNAL 계정 권한보기 Pass");
        js.executeScript("$('.ac_container_tab_header > ul > li:eq(1) > a')[0].click();");
        refreshReady();
        assertFalse(driver.getPageSource().contains("페이지 주소가 잘못 입력되었거나, 이미 삭제된 페이지입니다."));
        assertTrue(driver.getPageSource().contains("LDAP 사용자를 선택하세요."));
        System.out.println("권한 관리 > 관리자 권한 보기 > LDAP탭 접근 : Pass");
        Thread.sleep(1000);
        js.executeScript("$('.fa-chevron-down').click();");
        js.executeScript("$('.normal > li:eq(7)').click();");
        refreshReady();
        assertFalse(driver.getPageSource().contains("페이지 주소가 잘못 입력되었거나, 이미 삭제된 페이지입니다."));
        assertTrue(driver.getPageSource().contains("중복권한 페이지 접근불가 확인용"));
        System.out.println("권한 관리 > 관리자 권한 보기 > LDAP 계정 권한보기 : Pass");
    }
    
  	@Test(priority = 5)
    public void ctActionLog() throws Exception {
        driver.get(baseUrl + "/authority/ctActionLogList.ct");
        refreshReady();
        assertFalse(driver.getPageSource().contains("페이지 주소가 잘못 입력되었거나, 이미 삭제된 페이지입니다."));
        assertTrue(driver.getPageSource().contains("검색결과가 없습니다."));
        System.out.println("권한 관리 > 액션 로그 조회 > 페이지 접근 : Pass");
        if (TestBrowser.equals("chrome")) {
        	js.executeScript("$('.ac_btn_text').eq(6).click();");
            Thread.sleep(2000);
            assertFalse(driver.getPageSource().contains("페이지 주소가 잘못 입력되었거나, 이미 삭제된 페이지입니다."));
            System.out.println("권한 관리 > 액션 로그 조회 > 검색 : Pass");
            js.executeScript("$('.uid_ctactionlog_parameter:eq(0)').click();");
            handleMultipleWindows("Control Tower @ Cockpit");
            js.executeScript("$('.uid_confirm').click();");
            System.out.println("권한 관리 > 액션 로그 조회 > Parameter 보기 : Pass");
            handleMultipleWindows("Control Tower @ reboot");
            js.executeScript("$('.uid_ctactionlog_result').click();");
            handleMultipleWindows("Control Tower @ Cockpit");
            js.executeScript("$('.uid_confirm').click();");
            System.out.println("권한 관리 > 액션 로그 조회 > Result 보기 : Pass");
            handleMultipleWindows("Control Tower @ reboot");
        } else {
        	
        }        
    }
    
  	@Test(priority = 6)
    public void ctMember() throws Exception {
        driver.get(baseUrl + "/authority/ctMember/list.ct");
        refreshReady();
        assertFalse(driver.getPageSource().contains("페이지 주소가 잘못 입력되었거나, 이미 삭제된 페이지입니다."));
        assertTrue(driver.getPageSource().contains("CT 사용자 리스트"));
        System.out.println("권한 관리 > CT 사용자 관리 > 페이지 접근 : Pass");
        js.executeScript("$('.uid_ctmember_add_btn').click();");
        Thread.sleep(1000);
        js.executeScript("$('input[name=id]').val('test유저');");
        js.executeScript("$('input[name=name]').val('이름입니다.');");
        js.executeScript("$('input[name=department]').val('부서입니다.');");
        js.executeScript("$('input[name=tel]').val('010-0000-0000');");
        js.executeScript("$('input[name=email]').val('mail@astorm.co.kr');");
        js.executeScript("$('input[name=password]').val('password');");
        js.executeScript("$('input[name=passwordRe]').val('password');");
        js.executeScript("$('.uid_ctmember_save_btn').click();");
        assertTrue(driver.getPageSource().contains("저장 하시겠습니까?"));
        js.executeScript("$('.uid_ok_btn').click();");
        Thread.sleep(1000);
        assertTrue(driver.getPageSource().contains("저장되었습니다."));
        js.executeScript("$('.uid_ok_btn').click();");
        System.out.println("권한 관리 > CT 사용자 관리 > 사용자 추가 : Pass");
        Thread.sleep(1000);
        js.executeScript("$('.uid_ctmember_edit_btn:eq(0)').click();");
        Thread.sleep(1000);
        js.executeScript("$('input[name=name]').val('***** 이름 - 수정 *****');");
        js.executeScript("$('input[name=department]').val('***** 부서 - 수정 *****');");
        js.executeScript("$('input[name=tel]').val('***** 010-9999-9999 *****');");
        js.executeScript("$('input[name=email]').val('***** 메일수정@astorm.co.kr *****');");
        js.executeScript("$('.uid_ctmember_save_btn').click();");
        Thread.sleep(1000);
        assertTrue(driver.getPageSource().contains("저장 하시겠습니까?"));
        js.executeScript("$('.uid_ok_btn').click();");
        Thread.sleep(1000);
        assertTrue(driver.getPageSource().contains("저장되었습니다."));
        js.executeScript("$('.uid_ok_btn').click();");
        Thread.sleep(1000);
        System.out.println("권한 관리 > CT 사용자 관리 > 사용자 수정 : Pass");
        //비밀번호 초기화
        js.executeScript("$('.uid_ctmember_initpassword_btn:eq(0)').click();");
        Thread.sleep(1000);
        assertTrue(driver.getPageSource().contains("정말 비밀번호를 초기화"));
        js.executeScript("$('.uid_ok_btn').click();");
        Thread.sleep(1000);
        assertTrue(driver.getPageSource().contains("비밀번호가 초기화되었습니다."));
        js.executeScript("$('.uid_ok_btn').click();");
        System.out.println("권한 관리 > CT 사용자 관리 > 비밀번호 초기화 : Pass");
        Thread.sleep(1000);
        js.executeScript("$('.uid_ctmember_delete_btn:eq(0)').click();");
        Thread.sleep(1000);
        assertTrue(driver.getPageSource().contains("정말 삭제 하시겠습니까?"));
        js.executeScript("$('.uid_ok_btn').click();");
        Thread.sleep(1000);
        assertTrue(driver.getPageSource().contains("삭제되었습니다."));
        js.executeScript("$('.uid_ok_btn').click();");
        System.out.println("권한 관리 > CT 사용자 관리 > 사용자 삭제 : Pass");
        Thread.sleep(1000);
    }
    
    @AfterClass
    public static void tearDown() throws Exception {
    	//테스트 완료 3초 후 브라우저 종료
        Thread.sleep(3000);
    	driver.close();  //driver.quit() 사용시 오류나는 경우 있음
        String verificationErrorString = verificationErrors.toString();
        if (!"".equals(verificationErrorString)) {
            fail(verificationErrorString);
        }
    }
  	
}
