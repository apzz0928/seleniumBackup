import java.io.IOException;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;

import org.junit.*;

import static org.junit.Assert.*;

import org.openqa.selenium.By;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.NoAlertPresentException;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.ie.InternetExplorerDriver;
import org.openqa.selenium.Alert;
//import org.openqa.selenium.ie.InternetExplorerDriver;
import org.junit.runners.MethodSorters;



@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class rctTest {
	private static WebDriver driver;
	private static String TestBrowser;
	private static StringBuffer verificationErrors = new StringBuffer();
	private static String CHROMEDRIVER_FILE_PATH;
	private static String FIREFOXDRIVER_FILE_PATH;
	private static String INTERNETEXPLORER_FILE_PATH;
  	private static JavascriptExecutor js; 
 	private static HttpURLConnection huc;
  	private static int respCode;
    private static String baseUrl;
    private static String accountKey;
    private static String startAt; 
    private static String endAt;  

    
    public static void sendKeysAlert(String statusText, String number) throws Exception {
  		Alert alert=driver.switchTo().alert();
        String alertMessage=driver.switchTo().alert().getText();
        System.out.println (statusText + " : " + alertMessage);
        alert.sendKeys(number);
        alert.accept();        
  	};
  	
    @BeforeClass
    public static void setUp() throws Exception {
  		TestBrowser = "chrome";
  		CHROMEDRIVER_FILE_PATH = "D:/Selenium/chromedriver.exe"; //크롬 드라이버 파일 경로
  		FIREFOXDRIVER_FILE_PATH = "D:/Selenium/geckodriver.exe"; //파이어폭스 드라이버 파일 경로
  		INTERNETEXPLORER_FILE_PATH = "D:/Selenium/IEDriverServer32.exe"; //IE 드라이버 파일 경로  		
  		
  		if(TestBrowser.equals("chrome")){
  		//테스트 브라우저를 크롬으로 설정
  	  		System.setProperty("webdriver.chrome.driver", CHROMEDRIVER_FILE_PATH);
  	  		driver = new ChromeDriver();
  		} else if (TestBrowser.equals("firefox")) {
  	  		System.setProperty("webdriver.gecko.driver", FIREFOXDRIVER_FILE_PATH);
  	  		driver = new FirefoxDriver();
  		} else if (TestBrowser.equals("ie")) {
  			System.setProperty("webdriver.ie.driver", INTERNETEXPLORER_FILE_PATH);
  	  		driver = new InternetExplorerDriver();
  		}
  		driver.manage().window().setSize(new Dimension(1200, 1400));
        //javaScript를 쓸 수 있도록 해줌
        js = (JavascriptExecutor) driver;
        
        baseUrl = "https://rct-d-p.astorm.com";
        accountKey = "350238";
        startAt = "2018.06.05 00:00:00";
        endAt = "2018.06.06 00:00:00";
    }
 
  	//프롬프트창 입력 후 확인
  	public static void sendKeyAlert(String statusText, String number) throws Exception {
  		try {
	  		Thread.sleep(1000);
	  		Alert alert=driver.switchTo().alert();
	        String alertMessage=driver.switchTo().alert().getText();
	        System.out.println (statusText + " : " + alertMessage);
	        alert.sendKeys(number);
	        alert.accept();
	        Thread.sleep(1000);
	  	} catch (NoAlertPresentException e) {
			e.printStackTrace();
		}
  	}
    
  	//입력된 URL 정상 여부 확인
  	public static boolean brokenLinkCheck (String urlName, String urlLink){
        try {
            huc = (HttpURLConnection)(new URL(urlLink).openConnection());
            huc.setRequestMethod("HEAD");
            huc.connect();
            respCode = huc.getResponseCode();
            if(respCode >= 400 && respCode != 503){ //자료실 다이렉트x 다운로드 링크 503나서 예외처리 그래도 http코드는 볼수있게함
            	System.out.println("***** " + urlName +" : 링크 상태 HTTP : " + respCode + " *****");
            	fail();
            } else {
            	System.out.println(urlName +" : 링크 상태 HTTP : " + respCode);
            }
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
		return false;
    }
  	
    @Test
    public void A_Login() throws Exception {
    	//로그인
        driver.get(baseUrl + "/login/form.ct");
        Thread.sleep(1000);
        //해당 메세지가 있으면 Pass
        assertTrue(driver.getPageSource().contains("User ID"));
        //해당 메세지가 있으면 Fail
        assertFalse(driver.getPageSource().contains("페이지 주소가 잘못 입력되었거나, 이미 삭제된 페이지입니다."));        
        System.out.println("로그인 페이지 : Pass");
        js.executeScript("$('input[name=j_username]').prop('value', 'apzz0928')");
        js.executeScript("$('input[name=j_password]').prop('value', 'qordlf!@34')");
        js.executeScript("$('.ac_btn_text')[0].click();");
        System.out.println("로그인 : Pass");
        Thread.sleep(1000);        
    }
    
    @Test
    public void B_lang_change() throws Exception {
    	//한국어로 언어 변경
        driver.get(baseUrl + "/common/locale/ko");
        //해당 메세지가 있으면 Fail
        assertFalse(driver.getPageSource().contains("페이지 주소가 잘못 입력되었거나, 이미 삭제된 페이지입니다."));
        //해당 메세지가 있으면 Pass
        assertTrue(driver.getPageSource().contains("true"));
        System.out.println("언어변경 : Pass");
        Thread.sleep(1000);
        driver.get(baseUrl);
        Thread.sleep(1000);
    }
    
    //@Test
    public void gameMng_A_sendMail() throws Exception {
        driver.get(baseUrl + "/gmcmd/sendMailForm.ct");
        Thread.sleep(1000);
        assertFalse(driver.getPageSource().contains("페이지 주소가 잘못 입력되었거나, 이미 삭제된 페이지입니다."));
        assertTrue(driver.getPageSource().contains("특정 유저에게 우편을 발송하는 기능입니다."));
        driver.findElement(By.xpath("//div[@id='sk']/div/a/i")).click();
        driver.findElement(By.cssSelector("ul.normal > li.selected")).click();
        js.executeScript("$('input[name=recvAccountKey]').val('350238');");
        js.executeScript("$('input[name=sendNickName]').val('HerowarzTest');");
        js.executeScript("$('input[name=mailTitle]').val('우편 제목입니다.');");
        js.executeScript("$('textarea[name=mailContents]').val('우편 내용입니다.');");
        js.executeScript("$('input[name=itemCode]').val('500001');");
        js.executeScript("$('input[name=itemCount]').val('1');");
        js.executeScript("$('input[name=gold]').val('100');");
        js.executeScript("$('input[name=reason]').val('우편 테스트 입니다.');");
        js.executeScript("$('.ac_btn_text')[1].click()");
        Thread.sleep(1000);
        //해당 메세지가 있으면 Pass
        assertTrue(driver.getPageSource().contains("GM 명령이 호출 되었습니다."));
        js.executeScript("$('.uid_ok_btn').click();");
        System.out.println("우편 전송 > 전송 : Pass");
        Thread.sleep(1000);
        js.executeScript("$('input[name=keyward]').val('우편 테스트 입니다.');");
        js.executeScript("$('.ac_btn_text')[2].click()");
        Thread.sleep(1000);
        assertFalse(driver.getPageSource().contains("페이지 주소가 잘못 입력되었거나, 이미 삭제된 페이지입니다."));
        System.out.println("우편 전송 > 검색 : Pass");
    }
    
    @Test
    public void gameMng_B_systemMessage() throws Exception {
    	driver.get(baseUrl + "/gmcmd/systemMessageForm.ct");
        Thread.sleep(1000);
        assertFalse(driver.getPageSource().contains("페이지 주소가 잘못 입력되었거나, 이미 삭제된 페이지입니다."));
        assertTrue(driver.getPageSource().contains("모든 공지는 채팅창에 출력됩니다."));
        js.executeScript("$('.fa-circle-o')[1].click();");
        js.executeScript("$('input[name=displayMessage]').val('게임 공지 테스트 입니다.')");
        js.executeScript("$('.fa-circle-o')[3].click();"); 
        Thread.sleep(1000);
        js.executeScript("$('.ac_btn_text')[0].click();");
        Thread.sleep(2000);
        assertTrue(driver.getPageSource().contains("GM 명령이 호출 되었습니다."));
        js.executeScript("$('.uid_ok_btn').click();");
        Thread.sleep(1000);
        System.out.println("systemMessage > 전송 : Pass");
        Thread.sleep(1000);
        js.executeScript("$('.ac_btn_text')[1].click()");
        Thread.sleep(1000);
        assertFalse(driver.getPageSource().contains("페이지 주소가 잘못 입력되었거나, 이미 삭제된 페이지입니다."));
        System.out.println("systemMessage > 검색 : Pass");
    }
    
    @Test
    public void gameMng_C_ingameNotice() throws Exception {
    	//게임관리 > 인게임 공지로 이동
        driver.get(baseUrl + "/gmcmd/ingameNotice.ct");
        Thread.sleep(1000);
        assertFalse(driver.getPageSource().contains("페이지 주소가 잘못 입력되었거나, 이미 삭제된 페이지입니다."));
        assertTrue(driver.getPageSource().contains("인게임 이벤트 공지는 반복만 선택 할 수 있습니다."));
        js.executeScript("$('input[name=startAt]').val('" + startAt + "');");
        System.out.println("게임 관리 > 인게임 공지 > 시작시간 입력 > Pass");
        js.executeScript("$('input[name=endAt]').val('" + endAt + "');");
        System.out.println("게임 관리 > 인게임 공지 > 종료시간 입력 > Pass");
        js.executeScript("$('.fa-square-o')[0].click()");
        js.executeScript("$('.fa-square-o')[0].click()");
        js.executeScript("$('.fa-square-o')[0].click()");
        js.executeScript("$('.fa-square-o')[0].click()");
        js.executeScript("$('.fa-square-o')[0].click()");
        js.executeScript("$('.fa-square-o')[0].click()");
        js.executeScript("$('.fa-square-o')[0].click()");
        System.out.println("게임 관리 > 인게임 공지 > 노출 요일 선택 > Pass");
        js.executeScript("$('input[name=repeatTime]').val('1');");
        System.out.println("게임 관리 > 인게임 공지 > 반복 주기 입력 > Pass");
        js.executeScript("$('input[name=name]').val('인게임 공지 제목입니다.');");
        System.out.println("게임 관리 > 인게임 공지 > 공지 제목 입력 > Pass");
        js.executeScript("$('input[name=desc]').val('인게임 공지 설명입니다.');");
        System.out.println("게임 관리 > 인게임 공지 > 공지 설명 입력 > Pass");
        js.executeScript("$('.fa-square-o')[0].click()");
        System.out.println("게임 관리 > 인게임 공지 > 롤링 선택  > Pass");
        js.executeScript("$('.fa-circle-o')[2].click();");
        System.out.println("게임 관리 > 인게임 공지 > 공지 위치 선택 > Pass");
        js.executeScript("$('.ac_input:eq(11)').val('10')");
        System.out.println("게임 관리 > 인게임 공지 > 지속 시간 입력 > Pass");
        js.executeScript("$('.ac_input:eq(11)').val('테스트 공지 내용')");
        System.out.println("게임 관리 > 인게임 공지 > 공지 내용 입력 > Pass");
        js.executeScript("$('.ac_btn_text')[2].click();");
        assertTrue(driver.getPageSource().contains("입력되었습니다."));
        js.executeScript("$('.uid_ok_btn').click();");
        System.out.println("게임 관리 > 인게임 공지 등록 > Pass");
        /*
        //인게임 공지 등록
        driver.findElement(By.xpath("//div[@id='sk']/div/a/i")).click();
        driver.findElement(By.cssSelector("ul.normal > li.selected")).click();
        js.executeScript("$('input[name=startAt]').val('" + startAt + "')");
        js.executeScript("$('input[name=endAt]').val('" + endAt +"')");
        driver.findElement(By.cssSelector("i.fa.fa-square-o")).click();
        driver.findElement(By.cssSelector("i.fa.fa-square-o")).click();
        driver.findElement(By.cssSelector("i.fa.fa-square-o")).click();
        driver.findElement(By.cssSelector("i.fa.fa-square-o")).click();
        driver.findElement(By.cssSelector("i.fa.fa-square-o")).click();
        driver.findElement(By.cssSelector("i.fa.fa-square-o")).click();
        driver.findElement(By.cssSelector("i.fa.fa-square-o")).click();
        driver.findElement(By.name("repeatTime")).clear();
        driver.findElement(By.name("repeatTime")).sendKeys("1");
        driver.findElement(By.name("name")).clear();
        driver.findElement(By.name("name")).sendKeys("공지 등록 테스트 - 이름 입니다.");
        driver.findElement(By.name("desc")).clear();
        driver.findElement(By.name("desc")).sendKeys("공지 등록 테스트 - 설명 입니다.");
        driver.findElement(By.xpath("//tbody[@id='uid_content_list']/tr/td[2]/div[2]/div/i")).click();
        driver.findElement(By.xpath("//input[@name='']")).clear();
        driver.findElement(By.xpath("//input[@name='']")).sendKeys("10");
        driver.findElement(By.xpath("(//input[@name=''])[2]")).clear();
        driver.findElement(By.xpath("(//input[@name=''])[2]")).sendKeys("공지 등록 테스트 - 내용 입니다.");
        js.executeScript("$('.uid_setting_form_save_btn').click();");
        Thread.sleep(1000);
        assertTrue(driver.getPageSource().contains("입력되었습니다."));
        System.out.println("게임 관리 > 인게임 공지 등록 > Pass");
        driver.findElement(By.cssSelector("button.ac_btn.uid_ok_btn")).click();
        Thread.sleep(1000);
        //공지 상태 변경
        js.executeScript("$('.uid_notice_start_btn')[0].click();");
        Thread.sleep(1000);
        assertTrue(driver.getPageSource().contains("변경 되었습니다."));
        System.out.println("게임 관리 > 인게임 공지 준비>진행중 상태변경 > Pass");
        driver.findElement(By.cssSelector("button.ac_btn.uid_ok_btn")).click();
        Thread.sleep(1000);
        js.executeScript("$('.uid_notice_stop_btn')[0].click();");
        Thread.sleep(1000);
        assertTrue(driver.getPageSource().contains("변경 되었습니다."));
        System.out.println("게임 관리 > 인게임 공지 진행중>준비 상태변경 > Pass");
        driver.findElement(By.cssSelector("button.ac_btn.uid_ok_btn")).click();
        Thread.sleep(1000);
        js.executeScript("$('.uid_notice_start_btn')[0].click();");
        Thread.sleep(1000);
        assertTrue(driver.getPageSource().contains("변경 되었습니다."));
        System.out.println("게임 관리 > 인게임 공지 준비>진행중 상태변경 > Pass");
        driver.findElement(By.cssSelector("button.ac_btn.uid_ok_btn")).click();
        Thread.sleep(1000);
        js.executeScript("$('.uid_notice_end_btn')[0].click();");
        Thread.sleep(1000);
        assertTrue(driver.getPageSource().contains("변경 되었습니다."));
        System.out.println("게임 관리 > 인게임 공지 진행중>종료 상태변경 > Pass");
        driver.findElement(By.cssSelector("button.ac_btn.uid_ok_btn")).click();
        Thread.sleep(1000);
        //히스토리 보기
        js.executeScript("$('.uid_history_show_btn')[0].click();");
        Thread.sleep(5000);
        js.executeScript("$('.uid_layer_close').click();");
        System.out.println("게임 관리 > 인게임 공지 히스토리 > Pass");
        */
    }

    //@Test
    public void gameMng_D_kickUser() throws Exception {
    	//게임관리 > kickUser로 이동
        driver.get(baseUrl + "/gmcmd/kickUserForm.ct");
        Thread.sleep(1000);
        //해당 메세지가 있으면 Fail
        assertFalse(driver.getPageSource().contains("페이지 주소가 잘못 입력되었거나, 이미 삭제된 페이지입니다."));
        //유저 강제 종료 확인
        driver.get(baseUrl + "/gmcmd/kickUserForm.ct");
        driver.findElement(By.xpath("//div[@id='sk']/div/a/i")).click();
        driver.findElement(By.cssSelector("ul.normal > li.selected")).click();
        driver.findElement(By.name("accountKey")).clear();
        driver.findElement(By.name("accountKey")).sendKeys(accountKey);
        driver.findElement(By.name("forbidTime")).clear();
        driver.findElement(By.name("forbidTime")).sendKeys("0");
        driver.findElement(By.name("reason")).clear();
        driver.findElement(By.name("reason")).sendKeys("kickUser 테스트 입니다.");
        //입력창 다 입력하고 1초 대기
        Thread.sleep(1000);   
        driver.findElement(By.cssSelector("button.ac_btn_inner")).click();
        //메세지 레이어 로딩까지 2초 대기
        Thread.sleep(2000);
        //해당 메세지가 있으면 Pass
        assertTrue(driver.getPageSource().contains("GM 명령이 호출 되었습니다."));
        driver.findElement(By.cssSelector("button.ac_btn.uid_ok_btn")).click();
        Thread.sleep(1000);   
    }
    
    /*
    //@Test
    public void gameMng_E_shutDown() throws Exception {
    	//게임관리 > 게임서버 강제 종료로 이동
        driver.get(baseUrl + "/gmcmd/shutDownForm.ct");
        Thread.sleep(1000);
        //해당 메세지가 있으면 Fail
        assertFalse(driver.getPageSource().contains("페이지 주소가 잘못 입력되었거나, 이미 삭제된 페이지입니다."));
        //   
    }
    */
    
    //@Test
    public void gameMng_F_mailOut() throws Exception {
    	//게임관리 > 우편 대량 발송으로 이동
        driver.get(baseUrl + "/gmcmd/mailoutform.ct");
        Thread.sleep(1000);
        //해당 메세지가 있으면 Fail
        assertFalse(driver.getPageSource().contains("페이지 주소가 잘못 입력되었거나, 이미 삭제된 페이지입니다."));
        //우편 대량 발송 확인
        driver.findElement(By.xpath("//div[@id='sk']/div/a/i")).click();
        driver.findElement(By.cssSelector("ul.including > li")).click();
        driver.findElement(By.name("filedata")).sendKeys("C:\\Users\\Administrator\\Downloads\\템골드전부미첨부.xlsx");
        driver.findElement(By.name("reason")).clear();
        driver.findElement(By.name("reason")).sendKeys("우편 대량 발송 테스트 입니다.");
        //입력창 다 입력하고 1초 대기
        Thread.sleep(1000);
        driver.findElement(By.cssSelector("button.ac_btn_inner")).click();
        //메세지 레이어 로딩까지 1초 대기
        Thread.sleep(1000); 
        //해당 메세지가 있으면 Pass
        assertTrue(driver.getPageSource().contains("대량 메일 발송이 시작됩니다."));
        driver.findElement(By.cssSelector("button.ac_btn.uid_ok_btn")).click();
        //우편 대량 발송 확인 페이지 로딩까지 3초 대기
        Thread.sleep(3000);
        //해당 메세지가 있으면 Pass
        assertTrue(driver.getPageSource().contains("(발송완료)"));
        driver.findElement(By.cssSelector("span.ac_btn_text.au_text_center")).click();
        Thread.sleep(1000);   
    }
    
    //@Test
    public void gameMng_G_burningEvent() throws Exception {
    	//게임관리 > 버닝 이벤트 관리로 이동
        driver.get(baseUrl + "/event/burning/list.ct");
        Thread.sleep(1000);
        //해당 메세지가 있으면 Fail
        assertFalse(driver.getPageSource().contains("페이지 주소가 잘못 입력되었거나, 이미 삭제된 페이지입니다."));
        //버닝 이벤트 추가
        driver.findElement(By.cssSelector("span.ac_btn_text.au_text_center")).click();
        //페이지 이동 후 1초 대기
        Thread.sleep(1000);
        driver.findElement(By.xpath("//div[@id='uid_burning_add_area']/div[2]/div/table/tbody/tr[3]/td/div/div/a/i")).click();
        driver.findElement(By.xpath("//div[4]/div/ul[2]/li[2]")).click();
        driver.findElement(By.xpath("//input[@name='']")).click();
        driver.findElement(By.xpath("//input[@name='']")).clear();
        driver.findElement(By.xpath("//input[@name='']")).sendKeys(startAt);
        driver.findElement(By.cssSelector("button.btn-cancel.uid_calendar_time_cancel")).click();
        driver.findElement(By.xpath("(//input[@name=''])[2]")).click();
        driver.findElement(By.xpath("(//input[@name=''])[2]")).clear();
        driver.findElement(By.xpath("(//input[@name=''])[2]")).sendKeys(endAt);
        //입력값 모두 입력 후 1초 대기
        Thread.sleep(1000);
        driver.findElement(By.xpath("(//button[@type='button'])[39]")).click();
        Thread.sleep(1000);
        driver.findElement(By.xpath("(//button[@type='button'])[18]")).click();
        Thread.sleep(1000);
        driver.findElement(By.cssSelector("button.ac_btn.uid_ok_btn")).click();
        Thread.sleep(1000);
    }
    
    //@Test
    public void gameMng_H_getServerStatus() throws Exception {
    	//게임관리 > 서버 제어로 이동
        driver.get(baseUrl + "/cache/getServerStatus.ct");
        Thread.sleep(1000);
        //해당 메세지가 있으면 Fail
        assertFalse(driver.getPageSource().contains("페이지 주소가 잘못 입력되었거나, 이미 삭제된 페이지입니다."));
        //서버 제어 확인
        driver.findElement(By.xpath("//input[@name='']")).click();
        driver.findElement(By.xpath("//input[@name='']")).clear();
        driver.findElement(By.xpath("//input[@name='']")).sendKeys("60");
        driver.findElement(By.xpath("//div[@id='HC-IS_AUTO_SHUTDOWN.1']/div/a/i")).click();
        driver.findElement(By.xpath("//div[4]/div/ul[2]/li[2]")).click();
        driver.findElement(By.xpath("(//input[@name=''])[2]")).click();
        driver.findElement(By.cssSelector("button.btn-today.uid_calendar_time_now")).click();
        driver.findElement(By.cssSelector("button.btn-ok.uid_calendar_time_ok")).click();
        driver.findElement(By.xpath("//div[@id='HC-MAINTENANCE_END_TIME.1']/div/div")).click();
        driver.findElement(By.xpath("(//button[@type='button'])[37]")).click();
        driver.findElement(By.xpath("(//button[@type='button'])[38]")).click();
        driver.findElement(By.xpath("//div[@id='HC-XIGNCODE_TYPE.1']/div/a/i")).click();
        driver.findElement(By.xpath("//div[5]/div/ul[2]/li[2]")).click();
        //입력창 다 입력하고 1초 대기
        Thread.sleep(1000);
        driver.findElement(By.cssSelector("button.ac_btn_inner")).click();
        //상태 변경될동안 3초 대기
        Thread.sleep(3000);
        //해당 메세지가 있으면 Pass
        assertTrue(driver.getPageSource().contains("정상적으로 설정하였습니다."));
        driver.findElement(By.cssSelector("button.ac_btn.uid_ok_btn")).click();
        Thread.sleep(5000);
    }
    
    //@Test
    public void gameMng_I_limitdrop() throws Exception {
    	//게임관리 > 아이템 드랍 설정으로 이동
        driver.get(baseUrl + "/event/limitdrop/confUploadForm.ct");
        Thread.sleep(1000);
        //해당 메세지가 있으면 Fail
        assertFalse(driver.getPageSource().contains("페이지 주소가 잘못 입력되었거나, 이미 삭제된 페이지입니다."));
        //아이템 드랍 설정 확인       
        driver.findElement(By.xpath("//div[@id='sk']/div/a/i")).click();
        driver.findElement(By.cssSelector("ul.normal > li.selected")).click();
        //서버 선택 후 1초 대기
        Thread.sleep(1000);
        driver.findElement(By.name("filedata")).sendKeys("C:\\Users\\Administrator\\Downloads\\dropConfSample.xlsx");
        driver.findElement(By.cssSelector("button.ac_btn_inner")).click();
        //파일 업로드 후 1초 대기
        Thread.sleep(1000);
        driver.findElement(By.xpath("(//button[@type='button'])[14]")).click();
        Thread.sleep(1000);
        //해당 메세지가 있으면 Pass
        assertTrue(driver.getPageSource().contains("변경하시겠습니까?"));
        driver.findElement(By.cssSelector("button.ac_btn.uid_ok_btn")).click();
        Thread.sleep(1000);
        //해당 메세지가 있으면 Pass
        assertTrue(driver.getPageSource().contains("reload를 눌러야 게임에 반영됩니다."));
        driver.findElement(By.cssSelector("button.ac_btn.uid_ok_btn")).click();
        Thread.sleep(1000);
        driver.findElement(By.xpath("(//button[@type='button'])[14]")).click();
        Thread.sleep(1000);
        //해당 메세지가 있으면 Pass
        assertTrue(driver.getPageSource().contains("변경하시겠습니까?"));
        driver.findElement(By.cssSelector("button.ac_btn.uid_ok_btn")).click();
        Thread.sleep(1000);
        //해당 메세지가 있으면 Pass
        assertTrue(driver.getPageSource().contains("reload를 눌러야 게임에 반영됩니다."));
        driver.findElement(By.cssSelector("button.ac_btn.uid_ok_btn")).click();
        Thread.sleep(2000);
        driver.findElement(By.xpath("(//button[@type='button'])[15]")).click();
        Thread.sleep(1000);
        //해당 메세지가 있으면 Pass
        assertTrue(driver.getPageSource().contains("게임 서버에 적용 되었습니다."));
        driver.findElement(By.cssSelector("button.ac_btn.uid_ok_btn")).click();
        Thread.sleep(1000);
    }
    
    //@Test
    public void gameMng_J_ingameGuide() throws Exception {
    	//게임관리 > 인게임 가이드 리스트로 이동
        driver.get(baseUrl + "/gmcmd/ingameGuide/list.ct");
        Thread.sleep(1000);
        //해당 메세지가 있으면 Fail
        assertFalse(driver.getPageSource().contains("페이지 주소가 잘못 입력되었거나, 이미 삭제된 페이지입니다."));
        //인게임 가이드 작성
        driver.findElement(By.xpath("(//button[@type='button'])[44]")).click();
        Thread.sleep(1000);
        js.executeScript("$('input[name=firstCategory]').prop('value', '인게임 가이드 테스트 대분류 입니다.');");
        js.executeScript("$('input[name=secondCategory]').prop('value', '인게임 가이드 테스트 소분류 입니다.');");
        //ckeditor iframe 선택 후 내용 입력
        js.executeScript("$('.cke_wysiwyg_frame').contents().find('.cke_editable').text('내용 입력입니다.')");
        driver.findElement(By.name("order")).sendKeys("0");
        //입력값 입력 후 2초 대기
        Thread.sleep(2000);
        //저장하시겠습니까
        js.executeScript("$('.uid_ingame_guide_save_btn').click();");
        Thread.sleep(1000);
        driver.findElement(By.cssSelector("button.ac_btn.uid_ok_btn")).click();
        Thread.sleep(1000);
        driver.findElement(By.cssSelector("button.ac_btn.uid_ok_btn")).click();
        Thread.sleep(1000);
        
        //인게임 가이드 수정
        //driver.findElement(By.xpath("(//button[@type='button'])[15]")).click();
        //리스트 최상단의 수정 버튼 클릭
        js.executeScript("$('.ac_btn_text.au_text_center').eq(2).click();");
        //수정 레이어 로딩까지 1초 대기
        Thread.sleep(1000);
        js.executeScript("$('input[name=firstCategory]').prop('value', '--- 대분류 대분류 대분류 ---');");
        js.executeScript("$('input[name=secondCategory]').prop('value', '---소분류 소분류 소분류---');");
        js.executeScript("$('.cke_wysiwyg_frame').contents().find('.cke_editable').text('--- 내용 내용 내용 ---')");
        //입력창 다 입력하고 2초 대기
        Thread.sleep(2000);
        //driver.findElement(By.xpath("(//button[@type='button'])[53]")).click();
        //저장하시겠습니까
        js.executeScript("$('.uid_ingame_guide_save_btn').click();");
        Thread.sleep(1000);
        driver.findElement(By.cssSelector("button.ac_btn.uid_ok_btn")).click();
        //저장되었습니다.
        Thread.sleep(1000);
        driver.findElement(By.cssSelector("button.ac_btn.uid_ok_btn")).click();
        Thread.sleep(1000);
        //인게임 가이드 삭제
        driver.findElement(By.xpath("(//button[@type='button'])[16]")).click();
        //삭제하시겠습니까?
        Thread.sleep(1000);
        driver.findElement(By.cssSelector("button.ac_btn.uid_ok_btn")).click();
        //삭제되었습니다.
        Thread.sleep(1000);
        driver.findElement(By.cssSelector("button.ac_btn.uid_ok_btn")).click();
        Thread.sleep(1000);
    }
    
    //@Test
    public void gameMng_K_onlineUserCountInfo() throws Exception {
    	//게임관리 > 온라인 유저수 조회로 이동
        driver.get(baseUrl + "/gmcmd/onlineUserCountInfo.ct");
        Thread.sleep(3000);
        //해당 메세지가 있으면 Fail
        assertFalse(driver.getPageSource().contains("페이지 주소가 잘못 입력되었거나, 이미 삭제된 페이지입니다."));
        //현재 페이지에 '온라인 유저수 조회' 문구가 존재하면 pass
        assertTrue(driver.getPageSource().contains("온라인 유저수 조회"));
    }
    
    //@Test
    public void gameMng_L_slangForm() throws Exception {
    	//게임관리 > 금칙어 관리로 이동
        driver.get(baseUrl + "/gmcmd/slangForm.ct");
        Thread.sleep(1000);
        //해당 메세지가 있으면 Fail
        assertFalse(driver.getPageSource().contains("페이지 주소가 잘못 입력되었거나, 이미 삭제된 페이지입니다."));
        
        //금칙어 관리 테스트 후 추가
        driver.findElement(By.cssSelector("textarea.ac_input.au_text_left")).clear();
        driver.findElement(By.cssSelector("textarea.ac_input.au_text_left")).sendKeys("금칙어 추가 입니다.");
        driver.findElement(By.xpath("//input[@name='']")).clear();
        driver.findElement(By.xpath("//input[@name='']")).sendKeys("추가된 금칙어 입니다.");
        driver.findElement(By.xpath("(//textarea[@name=''])[2]")).clear();
        driver.findElement(By.xpath("(//textarea[@name=''])[2]")).sendKeys("금칙어 추가 입니다.");
        //입력값 다 입력하고 1초 대기
        Thread.sleep(1000);
        driver.findElement(By.cssSelector("div.uid_slang_word_add_test_btn")).click();
        //버튼 클릭하고 1초 대기
        Thread.sleep(1000);
        driver.findElement(By.cssSelector("div.uid_slang_word_add_btn")).click();
        //버튼 클릭하고 1초 대기
        Thread.sleep(1000);
        driver.findElement(By.cssSelector("button.ac_btn.uid_ok_btn")).click();
        //버튼 클릭하고 1초 대기
        Thread.sleep(1000);
        driver.findElement(By.cssSelector("button.ac_btn.uid_ok_btn")).click();
        Thread.sleep(1000);
        
        //금칙어 관리 테스트 후 수정
        driver.findElement(By.cssSelector("button.ac_btn_inner")).click();
        driver.findElement(By.xpath("(//textarea[@name=''])[3]")).clear();
        driver.findElement(By.xpath("(//textarea[@name=''])[3]")).sendKeys("금칙어 수정");
        driver.findElement(By.xpath("(//input[@name=''])[4]")).clear();
        driver.findElement(By.xpath("(//input[@name=''])[4]")).sendKeys("수정된 금칙어 입니다.");
        driver.findElement(By.xpath("(//input[@name=''])[5]")).clear();
        driver.findElement(By.xpath("(//input[@name=''])[5]")).sendKeys("금칙어 수정");
        //입력값 다 입력하고 1초 대기
        Thread.sleep(1000);
        driver.findElement(By.cssSelector("div.uid_slang_word_modify_test_btn")).click();
        //버튼 클릭하고 1초 대기
        Thread.sleep(1000);
        driver.findElement(By.cssSelector("div.uid_slang_word_modify_btn")).click();
        //버튼 클릭하고 1초 대기
        Thread.sleep(1000);
        driver.findElement(By.cssSelector("button.ac_btn.uid_ok_btn")).click();
        //버튼 클릭하고 1초 대기
        Thread.sleep(1000);
        driver.findElement(By.cssSelector("button.ac_btn.uid_ok_btn")).click();
        Thread.sleep(1000);
        
        //금칙어 관리 삭제
        driver.findElement(By.cssSelector("div.uid_slang_word_list_remove_btn")).click();
        //버튼 클릭하고 1초 대기
        Thread.sleep(1000);
        driver.findElement(By.cssSelector("button.ac_btn.uid_ok_btn")).click();
        //버튼 클릭하고 1초 대기
        Thread.sleep(1000);
        driver.findElement(By.cssSelector("button.ac_btn.uid_ok_btn")).click();
        Thread.sleep(1000);
        
        //금지어 관리 테스트 후 추가       
        driver.get(baseUrl + "/gmcmd/slangForm.ct?BPType=B");
        Thread.sleep(1000);
        driver.findElement(By.cssSelector("textarea.ac_input.au_text_left")).clear();
        driver.findElement(By.cssSelector("textarea.ac_input.au_text_left")).sendKeys("금지어 추가 입니다.");
        driver.findElement(By.xpath("//input[@name='']")).clear();
        driver.findElement(By.xpath("//input[@name='']")).sendKeys("추가된 금지어 입니다.");
        driver.findElement(By.xpath("(//textarea[@name=''])[2]")).clear();
        driver.findElement(By.xpath("(//textarea[@name=''])[2]")).sendKeys("금지어 추가 입니다.");
        //입력값 다 입력하고 1초 대기
        Thread.sleep(1000);
        driver.findElement(By.cssSelector("div.uid_slang_word_add_test_btn")).click();
        //버튼 클릭하고 1초 대기
        Thread.sleep(1000);
        driver.findElement(By.cssSelector("div.uid_slang_word_add_btn")).click();
        //버튼 클릭하고 1초 대기
        Thread.sleep(1000);
        driver.findElement(By.cssSelector("button.ac_btn.uid_ok_btn")).click();
        //버튼 클릭하고 1초 대기
        Thread.sleep(1000);
        driver.findElement(By.cssSelector("button.ac_btn.uid_ok_btn")).click();
        Thread.sleep(1000);
        
        //금지어 관리 테스트 후 수정
        driver.findElement(By.cssSelector("button.ac_btn_inner")).click();
        driver.findElement(By.xpath("(//textarea[@name=''])[3]")).clear();
        driver.findElement(By.xpath("(//textarea[@name=''])[3]")).sendKeys("금지어 수정");
        driver.findElement(By.xpath("(//input[@name=''])[4]")).clear();
        driver.findElement(By.xpath("(//input[@name=''])[4]")).sendKeys("수정된 금지어 입니다.");
        driver.findElement(By.xpath("(//input[@name=''])[5]")).clear();
        driver.findElement(By.xpath("(//input[@name=''])[5]")).sendKeys("금지어 수정");
        //입력값 다 입력하고 1초 대기
        Thread.sleep(1000);
        driver.findElement(By.cssSelector("div.uid_slang_word_modify_test_btn")).click();
        //버튼 클릭하고 1초 대기
        Thread.sleep(1000);
        driver.findElement(By.cssSelector("div.uid_slang_word_modify_btn")).click();
        //버튼 클릭하고 1초 대기
        Thread.sleep(1000);
        driver.findElement(By.cssSelector("button.ac_btn.uid_ok_btn")).click();
        //버튼 클릭하고 1초 대기
        Thread.sleep(1000);
        driver.findElement(By.cssSelector("button.ac_btn.uid_ok_btn")).click();
        Thread.sleep(1000);
        
        //금지어 관리 삭제
        driver.findElement(By.cssSelector("div.uid_slang_word_list_remove_btn")).click();
        //버튼 클릭하고 1초 대기
        Thread.sleep(1000);
        driver.findElement(By.cssSelector("button.ac_btn.uid_ok_btn")).click();
        //버튼 클릭하고 1초 대기
        Thread.sleep(1000);
        driver.findElement(By.cssSelector("button.ac_btn.uid_ok_btn")).click();
        Thread.sleep(1000);
    }
    
    //@Test
    public void gameMng_M_pvpSchedule() throws Exception {
    	//게임관리 > PvP스케줄 리스트로 이동
        driver.get(baseUrl + "/event/pvpSchedule/settingList.ct");
        Thread.sleep(1000);
        //해당 메세지가 있으면 Fail
        assertFalse(driver.getPageSource().contains("페이지 주소가 잘못 입력되었거나, 이미 삭제된 페이지입니다."));
        //PvP스케줄 리스트 확인     
        driver.findElement(By.cssSelector("button.ac_btn_inner")).click();
        driver.findElement(By.xpath("(//input[@name=''])[6]")).click();
        driver.findElement(By.cssSelector("button.btn-ok.uid_calendar_time_ok")).click();
        driver.findElement(By.xpath("(//input[@name=''])[7]")).click();
        driver.findElement(By.xpath("(//a[contains(text(),'23')])[2]")).click();
        driver.findElement(By.cssSelector("button.btn-ok.uid_calendar_time_ok")).click();
        driver.findElement(By.xpath("(//input[@name=''])[8]")).clear();
        driver.findElement(By.xpath("(//input[@name=''])[8]")).sendKeys("1");
        driver.findElement(By.xpath("(//input[@name=''])[9]")).clear();
        driver.findElement(By.xpath("(//input[@name=''])[9]")).sendKeys("500001");
        driver.findElement(By.xpath("(//input[@name=''])[10]")).clear();
        driver.findElement(By.xpath("(//input[@name=''])[10]")).sendKeys("1");
        Thread.sleep(1000);
        driver.findElement(By.cssSelector("div.ac_ctrl.am_btn.au_space_left_5.uid_schedule_save_btn")).click();      
        Thread.sleep(1000);
        driver.findElement(By.cssSelector("div.ac_ctrl.am_btn.uid_schedule_sync_btn")).click();
        Thread.sleep(1000);
        driver.findElement(By.cssSelector("button.ac_btn.uid_ok_btn")).click();
        Thread.sleep(1000);
        driver.findElement(By.cssSelector("button.ac_btn.uid_ok_btn")).click();
        Thread.sleep(1000);
    }
        
    //@Test
    public void authMng_A_authorityMenu() throws Exception {
    	//권한 관리 > 메뉴 관리로 이동
        driver.get(baseUrl + "/authority/menugroup.ct");
        Thread.sleep(1000);
        //해당 메세지가 있으면 Fail
        assertFalse(driver.getPageSource().contains("페이지 주소가 잘못 입력되었거나, 이미 삭제된 페이지입니다."));
        //메뉴 관리 리스트 순서 변경 및 검색 확인
        driver.findElement(By.xpath("(//button[@type='button'])[14]")).click();
        Thread.sleep(1000);
        driver.findElement(By.cssSelector("button.ac_btn.uid_ok_btn")).click();
        Thread.sleep(1000);
        driver.findElement(By.xpath("(//button[@type='button'])[15]")).click();
        Thread.sleep(1000);
        driver.findElement(By.cssSelector("button.ac_btn.uid_ok_btn")).click();
        Thread.sleep(1000);
        driver.findElement(By.cssSelector("input.ac_input.au_text_left")).clear();
        driver.findElement(By.cssSelector("input.ac_input.au_text_left")).sendKeys("common");
        driver.findElement(By.cssSelector("button.ac_btn_inner")).click();
        Thread.sleep(1000);
        //검색 후 "공통기능"이 있으면 Pass
        assertTrue(driver.getPageSource().contains("공통기능"));        
        Thread.sleep(1000);
        //서브메뉴 추가를 위해 상세보기 페이지로 이동
        driver.get(baseUrl + "/authority/group.ct?menuGroupId=46");
        Thread.sleep(1000);
        //해당 메세지가 있으면 Fail
        assertFalse(driver.getPageSource().contains("페이지 주소가 잘못 입력되었거나, 이미 삭제된 페이지입니다."));
        Thread.sleep(1000);
        //서브메뉴 추가
        driver.findElement(By.cssSelector("div.ac_ctrl.am_btn.uid_show_layer_menu_add_btn")).click();
        driver.findElement(By.name("menuName")).clear();
        driver.findElement(By.name("menuName")).sendKeys("menu Test 11");
        driver.findElement(By.name("menuNameKo")).clear();
        driver.findElement(By.name("menuNameKo")).sendKeys("menu Test 11");
        driver.findElement(By.name("menuNameEn")).clear();
        driver.findElement(By.name("menuNameEn")).sendKeys("menu Test 11");
        driver.findElement(By.name("menuNameJa")).clear();
        driver.findElement(By.name("menuNameJa")).sendKeys("menu Test 11");
        driver.findElement(By.name("menuNameZh")).clear();
        driver.findElement(By.name("menuNameZh")).sendKeys("menu Test 11");
        driver.findElement(By.name("menuDesc")).clear();
        driver.findElement(By.name("menuDesc")).sendKeys("menu Test 11");
        driver.findElement(By.cssSelector("div.ac_ctrl_textbox_cell.ac_input_cell > input[name=\"menuURI\"]")).clear();
        driver.findElement(By.cssSelector("div.ac_ctrl_textbox_cell.ac_input_cell > input[name=\"menuURI\"]")).sendKeys("/index.ct11");
        driver.findElement(By.cssSelector("div.ac_ctrl_textbox_cell.ac_input_cell > input[name=\"menuOrder\"]")).clear();
        driver.findElement(By.cssSelector("div.ac_ctrl_textbox_cell.ac_input_cell > input[name=\"menuOrder\"]")).sendKeys("11");
        Thread.sleep(1000);
        driver.findElement(By.cssSelector("div.ac_ctrl.am_btn.uid_layer_menu_add_btn.au_auto")).click();
        Thread.sleep(1000);
        driver.findElement(By.cssSelector("button.ac_btn.uid_ok_btn")).click();
        Thread.sleep(1000);
        //추가한 서브메뉴 삭제
        //jquery를 사용해서 선택
        js.executeScript("$('.uid_menu_del_btn:eq(11)').click();");
        Thread.sleep(1000);
        //driver.findElement(By.cssSelector("button.ac_btn.uid_ok_btn")).click();
        //driver.findElement(By.xpath("(//button[@type='button'])[57]")).click();
        Thread.sleep(1000);
        driver.findElement(By.cssSelector("button.ac_btn.uid_ok_btn")).click();
        Thread.sleep(1000);
        driver.findElement(By.cssSelector("button.ac_btn.uid_ok_btn")).click();
        Thread.sleep(1000);
    }
    
    //@Test //권한 그룹은 CT에서 삭제 불가능 하므로 확인 안함
    public void authMng_B_authorityGroupMng() throws Exception {
    	//권한 관리 > 권한 그룹 관리로 이동
        driver.get(baseUrl + "/authority/authGroupList.ct");
        Thread.sleep(1000);
        //해당 메세지가 있으면 Fail
        assertFalse(driver.getPageSource().contains("페이지 주소가 잘못 입력되었거나, 이미 삭제된 페이지입니다."));
        //권한 관리 > 권한 그룹 상세 정보로 이동
        driver.findElement(By.linkText("apzz09288888 전용 그룹")).click();
        Thread.sleep(1000);
        //해당 메세지가 있으면 Fail
        assertFalse(driver.getPageSource().contains("페이지 주소가 잘못 입력되었거나, 이미 삭제된 페이지입니다."));
        driver.findElement(By.cssSelector("div.ac_list_cell.ac_list_cell_btn > button.ac_btn")).click();
        driver.findElement(By.cssSelector("button.ac_btn_inner")).click();
        Thread.sleep(1000);
        //해당 문구가 있으면 Pass
        assertTrue(driver.getPageSource().contains("추가 되었습니다."));
        driver.findElement(By.cssSelector("button.ac_btn.uid_ok_btn")).click();
        Thread.sleep(1000);
        driver.findElement(By.xpath("(//button[@type='button'])[237]")).click();
        Thread.sleep(1000);
        driver.findElement(By.xpath("(//button[@type='button'])[235]")).click();
        Thread.sleep(1000);
        //해당 문구가 있으면 Pass
        assertTrue(driver.getPageSource().contains("삭제 되었습니다."));
        driver.findElement(By.cssSelector("button.ac_btn.uid_ok_btn")).click();
        driver.findElement(By.cssSelector("#ldapMember > ul.ac_list > li > div.ac_list_cell.ac_list_cell_btn > button.ac_btn")).click();
        driver.findElement(By.cssSelector("#b1 > button.ac_btn_inner")).click();
        Thread.sleep(1000);
        //해당 문구가 있으면 Pass
        assertTrue(driver.getPageSource().contains("추가 되었습니다."));
        driver.findElement(By.cssSelector("button.ac_btn.uid_ok_btn")).click();
        driver.findElement(By.cssSelector("#authGroupMember > ul.ac_list > li > div.ac_list_cell.ac_list_cell_btn > button.ac_btn")).click();
        driver.findElement(By.cssSelector("#b2 > button.ac_btn_inner")).click();
        Thread.sleep(1000);
        //해당 문구가 있으면 Pass
        assertTrue(driver.getPageSource().contains("해당 관리자의 권한을 삭제하시겠습니까?"));
        driver.findElement(By.cssSelector("button.ac_btn.uid_ok_btn")).click();
        Thread.sleep(1000);
    }
    
    //@Test 
    public void authMng_C_groupListByAdmin() throws Exception {
    	//권한 관리 > 사용자 권한 관리로 이동
        driver.get(baseUrl + "/authority/groupListByAdmin.ct");
        Thread.sleep(1000);
        //해당 메세지가 있으면 Fail
        assertFalse(driver.getPageSource().contains("페이지 주소가 잘못 입력되었거나, 이미 삭제된 페이지입니다."));
        //해당 문구가 있으면 Pass
        assertTrue(driver.getPageSource().contains("LDAP 사용자를 선택하세요."));
        //권한 관리 > 사용자 권한 관리로 이동
        driver.findElement(By.xpath("//div[@id='ldapMember']/div/a/i")).click();
        driver.findElement(By.xpath("//ul[2]/li[6]")).click();
        Thread.sleep(1000);
        //해당 문구가 있으면 Pass
        assertTrue(driver.getPageSource().contains("apzz09288888 전용 그룹"));        
        driver.findElement(By.linkText("LDAP")).click();
        driver.findElement(By.xpath("//div[@id='ldapMember']/div/a/i")).click();
        driver.findElement(By.xpath("//ul[2]/li[7]")).click();
        Thread.sleep(1000);
        //해당 문구가 있으면 Pass
        assertTrue(driver.getPageSource().contains("개발자 권한 그룹"));
    }
    
    //@Test 
    public void authMng_D_ctActionLog() throws Exception {
    	//권한 관리 > 액션 로그 조회로 이동
        driver.get(baseUrl + "/authority/ctActionLogList.ct");
        Thread.sleep(1000);
        //해당 메세지가 있으면 Fail
        assertFalse(driver.getPageSource().contains("페이지 주소가 잘못 입력되었거나, 이미 삭제된 페이지입니다."));
        //해당 문구가 있으면 Pass
        assertTrue(driver.getPageSource().contains("검색결과가 없습니다."));
        js.executeScript("$('.ac_btn_text').eq(6).click();");
        Thread.sleep(2000);
        //해당 문구가 있으면 Fail
        assertFalse(driver.getPageSource().contains("페이지 주소가 잘못 입력되었거나, 이미 삭제된 페이지입니다."));
        Thread.sleep(1000);
    }
    
    //@Test 
    public void authMng_E_ctMember() throws Exception {
    	//권한 관리 > ct사용자 관리로 이동
        driver.get(baseUrl + "/authority/ctMember/list.ct");
        Thread.sleep(1000);
        //해당 메세지가 있으면 Fail
        assertFalse(driver.getPageSource().contains("페이지 주소가 잘못 입력되었거나, 이미 삭제된 페이지입니다."));
        //ct사용자 등록
        js.executeScript("$('.uid_ctmember_add_btn').click();");
        //사용자 등록 레이어 로딩 대기
        Thread.sleep(1000);
        js.executeScript("$('input[name=id]').val('test유저');");
        js.executeScript("$('input[name=name]').val('이름입니다.');");
        js.executeScript("$('input[name=department]').val('부서입니다.');");
        js.executeScript("$('input[name=tel]').val('010-0000-0000');");
        js.executeScript("$('input[name=email]').val('mail@astorm.co.kr');");
        js.executeScript("$('input[name=password]').val('password');");
        js.executeScript("$('input[name=passwordRe]').val('password');");
        Thread.sleep(1000);
        driver.findElement(By.xpath("//button[@type='submit']")).click();
        Thread.sleep(1000);
        //해당 문구가 있으면 Pass
        assertTrue(driver.getPageSource().contains("저장 하시겠습니까?"));
        driver.findElement(By.cssSelector("button.ac_btn.uid_ok_btn")).click();
        Thread.sleep(1000);
        //해당 문구가 있으면 Pass
        assertTrue(driver.getPageSource().contains("저장되었습니다."));
        driver.findElement(By.cssSelector("button.ac_btn.uid_ok_btn")).click();
        Thread.sleep(1000);
        
        //ct 사용자 수정
        js.executeScript("$('.ac_btn_text').eq(0).click();");
        //사용자 설정 레이어 로딩 대기
        Thread.sleep(1000);        
        js.executeScript("$('input[name=name]').val('***** 이름 - 수정 *****');");
        js.executeScript("$('input[name=department]').val('***** 부서 - 수정 *****');");
        js.executeScript("$('input[name=tel]').val('***** 010-9999-9999 *****');");
        js.executeScript("$('input[name=email]').val('***** 메일수정@astorm.co.kr *****');");
        Thread.sleep(1000);
        js.executeScript("$('button[type=submit]').click();");
        Thread.sleep(1000);
        //해당 문구가 있으면 Pass
        assertTrue(driver.getPageSource().contains("저장 하시겠습니까?"));
        driver.findElement(By.cssSelector("button.ac_btn.uid_ok_btn")).click();
        Thread.sleep(1000);
        //해당 문구가 있으면 Pass
        assertTrue(driver.getPageSource().contains("저장되었습니다."));
        driver.findElement(By.cssSelector("button.ac_btn.uid_ok_btn")).click();
        Thread.sleep(1000);
        
        //비밀번호 초기화
        js.executeScript("$('.ac_btn_text').eq(2).click();");
        Thread.sleep(1000);
        //해당 문구가 있으면 Pass
        assertTrue(driver.getPageSource().contains("정말 비밀번호를 초기화"));
        driver.findElement(By.cssSelector("button.ac_btn.uid_ok_btn")).click();
        Thread.sleep(1000);
        //해당 문구가 있으면 Pass
        assertTrue(driver.getPageSource().contains("비밀번호가 초기화되었습니다."));
        driver.findElement(By.cssSelector("button.ac_btn.uid_ok_btn")).click();
        Thread.sleep(1000);
        
        //ct 사용자 삭제
        js.executeScript("$('.ac_btn_text').eq(1).click();");
        Thread.sleep(1000);
        //해당 문구가 있으면 Pass
        assertTrue(driver.getPageSource().contains("정말 삭제 하시겠습니까?"));
        driver.findElement(By.cssSelector("button.ac_btn.uid_ok_btn")).click();
        Thread.sleep(1000);
        //해당 문구가 있으면 Pass
        assertTrue(driver.getPageSource().contains("삭제되었습니다."));
        driver.findElement(By.cssSelector("button.ac_btn.uid_ok_btn")).click();
        Thread.sleep(1000);        
    }
    
    //@Test 
    public void gameAccountMng_A_historyLog() throws Exception {
    	//게임 계정 관리 > 히스토리 로그로 이동
        driver.get(baseUrl + "/historylog/search.ct");
        Thread.sleep(1000);
        //해당 메세지가 있으면 Fail
        assertFalse(driver.getPageSource().contains("페이지 주소가 잘못 입력되었거나, 이미 삭제된 페이지입니다."));
        //
    }
    
    //@Test 
    public void gameAccountMng_B_uuidTracking() throws Exception {
    	//게임 계정 관리 > uuid추적 으로 이동
        driver.get(baseUrl + "/historylog/uuidTracking.ct");
        Thread.sleep(1000);
        //해당 메세지가 있으면 Fail
        assertFalse(driver.getPageSource().contains("페이지 주소가 잘못 입력되었거나, 이미 삭제된 페이지입니다."));
        //
    }
    
    //@Test 
    public void gameAccountMng_A_accountSearch() throws Exception {
    	//게임 계정 관리 > 계정 검색으로 이동
        driver.get(baseUrl + "/account/gamedata/searchform.ct");
        Thread.sleep(1000);
        //해당 메세지가 있으면 Fail
        assertFalse(driver.getPageSource().contains("페이지 주소가 잘못 입력되었거나, 이미 삭제된 페이지입니다."));
        //
    }
    
    @AfterClass
    public static void tearDown() throws Exception {
    	//테스트 완료 3초 후 브라우저 종료
        Thread.sleep(3000);
    	driver.close();  //driver.quit() 사용시 오류나는 경우 있음
        String verificationErrorString = verificationErrors.toString();
        if (!"".equals(verificationErrorString)) {
            fail(verificationErrorString);
        }
    }
}
